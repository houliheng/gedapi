package com.resoft.outinterface.SV.client2;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.xml.namespace.QName;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.resoft.credit.interfaceinfo.entity.InterfaceInfo;
import com.resoft.credit.interfaceinfo.service.InterfaceInfoService;
import com.resoft.outinterface.SV.service.WorkOrderService;
import com.resoft.outinterface.utils.Facade;
import com.resoft.outinterface.utils.OutInterfaceUtils;
import com.thinkgem.jeesite.common.utils.SpringContextHolder;

/**
 * This class was generated by Apache CXF 3.1.4 2016-05-12T15:04:46.885+08:00
 * Generated source version: 3.1.4
 *
 */
@RestController
@RequestMapping(value = "/f/sv/request/")
public final class WorkOrderControllerDelegate_WorkOrderControllerPort_Client {

	private static final QName SERVICE_NAME = new QName("http://workorder.controller.application.mobile.com/",
			"WorkOrderControllerService");

	private static final Logger logger = LoggerFactory
			.getLogger(WorkOrderControllerDelegate_WorkOrderControllerPort_Client.class);

	private WorkOrderService workOrderService = SpringContextHolder.getBean("workOrderService");

	private InterfaceInfoService interfaceInfoService = SpringContextHolder.getBean("interfaceInfoService");

	@RequestMapping(method = RequestMethod.GET, value = "getSVClient2/{applyNo}")
	public void main(@PathVariable("applyNo") String applyNo) throws java.lang.Exception {
		Object app = applyNo;
		Date sendDate = new Date();
		;
		com.resoft.outinterface.SV.client2.CommonVO _orderDistribute__return;

		logger.debug("Invoking orderDistribute...");
		com.resoft.outinterface.SV.client.entry.request.WorkOrderDto workOrderDto = workOrderService
				.getWorkOrderDto(applyNo);
		com.resoft.outinterface.SV.client2.WorkOrderDto _orderDistribute_arg0 = new com.resoft.outinterface.SV.client2.WorkOrderDto();
		_orderDistribute_arg0.setAPPNO(workOrderDto.getAppNo());
		_orderDistribute_arg0.setAUTOISSUE("");
		_orderDistribute_arg0.setBSFLAG("0");
		_orderDistribute_arg0.setCLOSINGDATE(workOrderDto.getClosingDate());
		_orderDistribute_arg0.setCOMMISSION("");
		_orderDistribute_arg0.setCOMMISSIONTYPE("");
		_orderDistribute_arg0.setCONTRACTNO("");
		_orderDistribute_arg0.setCUSTOMERNAME(workOrderDto.getCustomerNo());
		_orderDistribute_arg0.setINCLUDEGUAR("");
		_orderDistribute_arg0.setINCLUDEWEEKEND("");
		_orderDistribute_arg0.setINVESTIGATORCOUNT("");
		_orderDistribute_arg0.setINVESTIGATORLEVEL("");
		_orderDistribute_arg0.setLOANAMOUNT(workOrderDto.getLoanAmount());
		_orderDistribute_arg0.setLOANTYPE(workOrderDto.getLoanType());
		_orderDistribute_arg0.setORDERDISCOUNT("");
		_orderDistribute_arg0.setORDERNO(OutInterfaceUtils.makeSeqNo());
		_orderDistribute_arg0.setORDERPRICE("");
		_orderDistribute_arg0.setPRODUCTNO(workOrderDto.getProductNo());
		_orderDistribute_arg0.setREMARK("");
		_orderDistribute_arg0.setUSERCODE(workOrderDto.getUserCode());
		_orderDistribute_arg0.setORGNO(workOrderDto.getOrgNo());
		List<com.resoft.outinterface.SV.client2.SurveyInfoDto> lsid = new ArrayList<com.resoft.outinterface.SV.client2.SurveyInfoDto>();
		List<com.resoft.outinterface.SV.client.entry.request.SurveyInfoDto> lsid2 = workOrderDto.getSurveyInfoDto();
		Iterator<com.resoft.outinterface.SV.client.entry.request.SurveyInfoDto> it = lsid2.iterator();
		while (it.hasNext()) {
			com.resoft.outinterface.SV.client2.SurveyInfoDto sid = new com.resoft.outinterface.SV.client2.SurveyInfoDto();
			com.resoft.outinterface.SV.client.entry.request.SurveyInfoDto sid2 = it.next();
			sid.setWORKID(sid2.getWorkId());
			sid.setADDRESS(sid2.getAddress());
			sid.setCITY(sid2.getCity());
			sid.setDISTRICT(sid2.getDistrict());
			sid.setISMASTER(sid2.getIsMaster());
			sid.setMASTERRELATION(sid2.getMasterRelation());
			sid.setPHONENO(sid2.getPhoneNo());
			sid.setPROCESS(sid2.getProcess());
			sid.setPROVINCES(sid2.getProvinces());
			if (StringUtils.isEmpty(sid2.getRemark())) {
				sid.setREMARK("");
			} else {
				sid.setREMARK(sid2.getRemark());
			}
			sid.setSURVEYNAME(sid2.getSurveyName());
			sid.setFLAG(sid2.getFlag());
			lsid.add(sid);
		}

		_orderDistribute_arg0.setSurveyInfoDto(lsid);
		logger.debug(_orderDistribute_arg0.toString());
		try {
			URL wsdlURL = WorkOrderControllerService.WSDL_LOCATION;
			WorkOrderControllerService ss = new WorkOrderControllerService(wsdlURL, SERVICE_NAME);
			WorkOrderControllerDelegate port = ss.getWorkOrderControllerPort();
			if (_orderDistribute_arg0.getSurveyInfoDto().size() > 0) {
				_orderDistribute__return = port.orderDistribute(_orderDistribute_arg0);
				logger.debug("SV返回消息" + _orderDistribute__return.getMsg());
				if (_orderDistribute__return.isSuccess() == true) {
					workOrderService.getWorkOrderUpdate(applyNo);
					Facade.facade.getDataToSVForInformationMatch(app);
				}
				try {
					interfaceInfoService.save(new InterfaceInfo(applyNo, "外访接口", _orderDistribute__return.getMsg(),
							sendDate, _orderDistribute_arg0.toString()));
				} catch (Exception e) {
					logger.error("接口信息记录失败！", e);
				}
			} else {
				logger.info("该客户没有需要重新发送的工单信息！");
			}
		} catch (Exception e1) {
			logger.error("接口调用失败！", e1);
			interfaceInfoService.save(new InterfaceInfo(applyNo, "外访接口", "访问失败" + e1.toString(), sendDate,
					_orderDistribute_arg0.toString()));
		}
	}
}
